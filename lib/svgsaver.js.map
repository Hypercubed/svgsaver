{"version":3,"sources":["../src/svgsaver.js"],"names":[],"mappings":";;;;;;;;;;0BAAkC,cAAc;;wBACzB,YAAY;;uBACJ,WAAW;;qBACN,SAAS;;IAEhC,QAAQ;AAYR,WAZA,QAAQ,GAYI;QAAX,IAAI,yDAAG,EAAE;;0BAZV,QAAQ;;AAajB,QAAI,CAAC,KAAK,GAAG,AAAC,IAAI,CAAC,KAAK,KAAK,SAAS,0BAAe,IAAI,CAAC,KAAK,CAAC;AAChE,QAAI,CAAC,MAAM,GAAG,AAAC,IAAI,CAAC,MAAM,KAAK,SAAS,2BAAgB,IAAI,CAAC,MAAM,CAAC;GACrE;;eAfU,QAAQ;;WAwBZ,iBAAC,EAAE,EAAE;AACV,UAAI,GAAG,GAAG,wBAAS,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;;AAEhD,SAAG,CAAC,YAAY,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAC;AACxD,SAAG,CAAC,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;;AAGjC,SAAG,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,CAAC;AAC9D,SAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,CAAC;;AAEhE,aAAO,GAAG,CAAC,SAAS,IAAI,AAAC,IAAI,MAAM,CAAC,aAAa,EAAE,CAAE,iBAAiB,CAAC,GAAG,CAAC,CAAC;KAC7E;;;WASM,iBAAC,EAAE,EAAE;AACV,UAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC5B,aAAO,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;KAC/C;;;WASK,gBAAC,EAAE,EAAE;AACT,UAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC5B,UAAI,sBAAU,MAAM,CAAC,IAAI,CAAC,EAAE;AAC1B,eAAO,4BAA4B,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;OACzD;AACD,aAAO,qBAAqB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;KACzD;;;WAUI,eAAC,EAAE,EAAE,QAAQ,EAAE;AAClB,UAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,EAAE,EAAE;AAChC,gBAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACpC,gBAAQ,GAAG,CAAC,QAAQ,IAAI,UAAU,CAAA,GAAE,MAAM,CAAC;OAC5C;AACD,UAAI,sBAAU,MAAM,CAAC,MAAM,CAAC,IAAI,uBAAW,IAAI,CAAC,EAAE;AAChD,eAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;OAC3C,MAAM;AACL,eAAO,sBAAQ,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;OAC3C;KACF;;;WAUI,eAAC,EAAE,EAAE,QAAQ,EAAE;AAClB,UAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,EAAE,EAAE;AAChC,gBAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACpC,gBAAQ,GAAG,CAAC,QAAQ,IAAI,UAAU,CAAA,GAAE,MAAM,CAAC;OAC5C;AACD,aAAO,sBAAQ,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC3C;;;SAlGU,QAAQ;;;;qBAsGN,QAAQ","file":"svgsaver.js","sourcesContent":["import {svgAttrs, svgStyles} from './collection';\nimport {cloneSvg} from './clonesvg';\nimport {saveUri, savePng} from './saveuri';\nimport {isDefined, isFunction} from './utils';\n\nexport class SvgSaver {\n\n  /**\n  * SvgSaver constructor.\n  * @constructs SvgSaver\n  * @api public\n  *\n  * @example\n  * var svgsaver = new SvgSaver();                      // creates a new instance\n  * var svg = document.querySelector('#mysvg');         // find the SVG element\n  * svgsaver.asSvg(svg);                                // save as SVG\n  */\n  constructor(opts = {}) {\n    this.attrs = (opts.attrs === undefined) ? svgAttrs : opts.attrs;\n    this.styles = (opts.styles === undefined) ? svgStyles : opts.styles;\n  }\n\n  /**\n  * Return the SVG HTML text after cleaning\n  *\n  * @param {SVGElement} el The element to copy.\n  * @returns {String} SVG text after cleaning\n  * @api public\n  */\n  getHTML(el) {\n    var svg = cloneSvg(el, this.attrs, this.styles);\n\n    svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svg.setAttribute('version', 1.1);\n\n    // height and width needed to download in FireFox\n    svg.setAttribute('width', svg.getAttribute('width') || '500');\n    svg.setAttribute('height', svg.getAttribute('height') || '900');\n\n    return svg.outerHTML || (new window.XMLSerializer()).serializeToString(svg);\n  }\n\n  /**\n  * Return the SVG, after cleaning, as a text/xml Blob\n  *\n  * @param {SVGElement} el The element to copy.\n  * @returns {Blog} SVG as a text/xml Blob\n  * @api public\n  */\n  getBlob(el) {\n    var html = this.getHTML(el);\n    return new Blob([html], { type: 'text/xml' });\n  }\n\n  /**\n  * Return the SVG, after cleaning, as a image/svg+xml;base64 URI encoded string\n  *\n  * @param {SVGElement} el The element to copy.\n  * @returns {String} SVG as image/svg+xml;base64 URI encoded string\n  * @api public\n  */\n  getUri(el) {\n    var html = this.getHTML(el);\n    if (isDefined(window.btoa)) {\n      return 'data:image/svg+xml;base64,' + window.btoa(html);\n    }\n    return 'data:image/svg+xml,' + encodeURIComponent(html);\n  }\n\n  /**\n  * Saves the SVG as a SVG file using method compatible with the browser\n  *\n  * @param {SVGElement} el The element to copy.\n  * @param {string} [filename] The filename to save, defaults to the SVG title or 'untitled.svg'\n  * @returns {SvgSaver} The SvgSaver instance\n  * @api public\n  */\n  asSvg(el, filename) {\n    if (!filename || filename === '') {\n      filename = el.getAttribute('title');\n      filename = (filename || 'untitled')+'.svg';\n    }\n    if (isDefined(window.saveAs) && isFunction(Blob)) {\n      return saveAs(this.getBlob(el), filename);\n    } else {\n      return saveUri(this.getUri(el), filename);\n    }\n  }\n\n  /**\n  * Saves the SVG as a PNG file using method compatible with the browser\n  *\n  * @param {SVGElement} el The element to copy.\n  * @param {string} [filename] The filename to save, defaults to the SVG title or 'untitled.png'\n  * @returns {SvgSaver} The SvgSaver instance\n  * @api public\n  */\n  asPng(el, filename) {\n    if (!filename || filename === '') {\n      filename = el.getAttribute('title');\n      filename = (filename || 'untitled')+'.png';\n    }\n    return savePng(this.getUri(el), filename);\n  }\n\n}\n\nexport default SvgSaver;\n"]}